{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","FeedbackOptions","setGood","setNeutral","setBad","className","onClick","Notification","Section","title","children","App","useState","setTotal","setPositivePercentage","useEffect","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAEe,SAASA,EAAWC,GAC/B,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBACnC,OACI,qCACI,uCAAS,+BAAOJ,OAChB,0CAAY,+BAAQC,OACpB,sCAAQ,+BAAOC,OACf,wCAAU,+BAAOC,OACjB,oDAAiC,IAAVA,EAAc,EAAI,+BAAOC,IAAhD,U,MCPG,SAASC,EAAgBN,GACpC,IAAQC,EAAoDD,EAApDC,KAAMM,EAA8CP,EAA9CO,QAASL,EAAqCF,EAArCE,QAASM,EAA4BR,EAA5BQ,WAAYL,EAAgBH,EAAhBG,IAAKM,EAAWT,EAAXS,OACjD,OACI,qCACI,wBAAQC,UAAU,cAAcC,QAAS,WAAQJ,EAAQN,EAAO,IAAhE,kBACA,wBAASS,UAAU,cAAcC,QAAS,WAAQH,EAAWN,EAAU,IAAvE,qBACA,wBAAQQ,UAAU,aAAaC,QAAS,WAAMF,EAAON,EAAM,IAA3D,oBCTG,SAASS,IACtB,OACE,kDCAW,SAASC,EAAQb,GAC9B,IAAQc,EAAoBd,EAApBc,MAAOC,EAAaf,EAAbe,SACf,OACE,qCACE,6BAAKD,IACJC,K,MCgDQC,MA/Cf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOhB,EAAP,KAAaM,EAAb,KACA,EAA8BU,mBAAS,GAAvC,mBAAOf,EAAP,KAAgBM,EAAhB,KACA,EAAsBS,mBAAS,GAA/B,mBAAOd,EAAP,KAAYM,EAAZ,KACA,EAA0BQ,mBAAS,GAAnC,mBAAOb,EAAP,KAAcc,EAAd,KACA,EAAoDD,mBAAS,GAA7D,mBAAOZ,EAAP,KAA2Bc,EAA3B,KAUA,OARAC,qBAAU,WACRF,EAASjB,EAAOC,EAAUC,KACzB,CAACF,EAAMC,EAASC,IAEnBiB,qBAAU,WACRD,EAAsBE,KAAKC,MAAc,IAAPrB,EAAcG,MAC/C,CAACA,EAAOH,IAGT,sBAAKS,UAAU,MAAf,UACE,uDACA,cAACG,EAAD,UACE,cAACP,EAAD,CACEC,QAASA,EACTN,KAAMA,EACNO,WAAYA,EACZN,QAASA,EACTO,OAAQA,EACRN,IAAKA,MAGE,IAAVC,EACC,cAACS,EAAD,UACE,cAACD,EAAD,MAGF,cAACC,EAAD,CAASC,MAAO,aAAhB,SACE,cAACf,EAAD,CACEE,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,UC1ChCkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.86143930.chunk.js","sourcesContent":["import PropTypes from \"prop-types\"\r\n\r\nexport default function Statistics(props) {\r\n    const { good, neutral, bad, total, positivePercentage } = props;\r\n    return (\r\n        <>\r\n            <p>Good: <span>{good}</span></p>\r\n            <p>Neutral: <span>{ neutral}</span></p>\r\n            <p>Bad: <span>{bad}</span></p>\r\n            <p>Total: <span>{total}</span></p>\r\n            <p>Positive feedback: {total === 0 ? 0 : <span>{positivePercentage}</span> }%</p>\r\n        </>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}","import PropTypes from \"prop-types\"\r\nimport \"./FeedbackOption.scss\"\r\n\r\nexport default function FeedbackOptions(props) {\r\n    const { good, setGood, neutral, setNeutral, bad, setBad } = props;\r\n    return (\r\n        <>\r\n            <button className='btn success' onClick={() => { setGood(good + 1) }}>good</button>\r\n            <button  className='btn warning' onClick={() => { setNeutral(neutral + 1) }}>neutral</button>\r\n            <button className='btn danger' onClick={()=>{ setBad(bad + 1)}}>bad</button>          \r\n        </>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    setGood: PropTypes.func.isRequired,\r\n    setNeutral: PropTypes.func.isRequired,\r\n    setBad: PropTypes.func.isRequired,\r\n}","export default function Notification() {\r\n  return (\r\n    <p>No feedback given</p>\r\n  );\r\n}\r\n","import PropTypes from \"prop-types\"\r\n\r\nexport default function Section(props) {\r\n  const { title, children } = props;\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.element.isRequired,\r\n}","import { useState, useEffect } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\nimport Section from \"./components/Section\";\nimport \"./App.css\";\n\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [positivePercentage, setPositivePercentage] = useState(0);\n\n  useEffect(() => {\n    setTotal(good + neutral + bad);\n  }, [good, neutral, bad]);\n\n  useEffect(() => {\n    setPositivePercentage(Math.round((good * 100) / total));\n  }, [total, good]);\n\n  return (\n    <div className=\"App\">\n      <h1>Please leave feedback</h1>\n      <Section>\n        <FeedbackOptions\n          setGood={setGood}\n          good={good}\n          setNeutral={setNeutral}\n          neutral={neutral}\n          setBad={setBad}\n          bad={bad}\n        />\n      </Section>\n      {total === 0 ? (\n        <Section>\n          <Notification/>\n        </Section>\n      ) : (\n        <Section title={\"Statistics\"}>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      )}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}